library(help = "datasets")
data(sleep)
str(sleep)
str(trees)
str(volcano)
str(WWWusage)
str(Orange)
View(Orange)
hist(Orange$age)
setwd("f:/work/R/Houses")
knitr::opts_chunk$set(echo = TRUE)
library(xgboost)
library(Metrics)
set.seed(0)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(reshape2)
library(caret)
data <- read.csv("train.csv")
head(data)
str(data)
data.id <- data$Id
data <- data %>% select(-Id)
imputeNumeric <- function(col) {
x.mean <- mean(col, na.rm = TRUE)
col[is.na(col)] <- x.mean
return(col)
}
imputeFactors <- function(col) {
levels(col) <- c(levels(col), "Missing")
col[is.na(col)] <-"Missing"
return(col)
}
imputeDataSet <- function(ds) {
tmp <- ds
for (col in names(tmp)) {
if (sum(is.na(tmp[[col]])) > 0) {
if (is.factor(tmp[[col]])) {
tmp[[col]] = imputeFactors(tmp[[col]])
}
else if (is.numeric(tmp[[col]])) {
tmp[[col]] = imputeNumeric(tmp[[col]])
}
}
}
return(tmp)
}
checkNas <- function(ds) {
columns <- names(ds)
col.nas <- sapply(columns, function(c) {sum(is.na(ds[[c]]))})
pcn.nas <- sapply(columns, function(c) {sum(is.na(ds[[c]])) / length(ds[[c]])})
num.nas <- data.frame(Column = columns, NumNas = col.nas, PcnNas = pcn.nas)
return(num.nas)
}
removeHighLevelNas <- function(data, nas.info, nas.level = .9){
col.stay <- as.character(nas.info[nas.info$PcnNas < nas.level, 'Column'])
return(data[, col.stay])
}
data.nas <- checkNas(data)
data <- removeHighLevelNas(data, data.nas)
data <- imputeDataSet(data)
checkNas(data)
FactorToInt <- function(col) {
lev <- levels(col)
y <- sapply(col, function(x) {which(lev == x)} )
return(y)
}
factorizeDS <- function(ds) {
tmp = ds
for (col in names(tmp)) {
if (is.factor(tmp[[col]]))
tmp[[col]] = FactorToInt(tmp[[col]])
}
return(tmp)
}
data <- factorizeDS(data)
sum(checkNas(data)$NumNas >0)
data.SalePrice <- data$SalePrice
data.nzv <- nearZeroVar(data[,-dim(data)[2]], saveMetrics = TRUE, names = TRUE)
data.nzv
nzv.vars <- data.nzv[data.nzv$zeroVar == FALSE  &  data.nzv$nzv == FALSE,]
data <- data[, rownames(nzv.vars)]
data['SalePrice'] =  data.SalePrice
data.cor = round(cor(data), 2)
data.mlt = melt(data.cor)
good.cor  = data.mlt %>%
filter(Var1 == "SalePrice" & value > .5)
data.mlt<- data.mlt %>%
filter(Var2 %in% good.cor$Var2) %>%
filter(Var1 %in% good.cor$Var2)
g <- ggplot(data = data.mlt, aes(x=Var1, y=Var2, fill=value))
g <- g + geom_tile()
g
data <- data[,good.cor$Var2]
for (col in names(data)){
data[[col]] = as.numeric(data[[col]])
}
set.seed(0)
inTrain <- createDataPartition(data$SalePrice, p = .7, list = FALSE)
train <- data[inTrain,]
valid <- data[-inTrain,]
y_train <- train$SalePrice
x_train <- train %>% dplyr::select(-SalePrice)
y_valid <- valid$SalePrice
x_valid <- valid %>% dplyr::select(-SalePrice)
library(xgboost)
library(Metrics)
set.seed(0)
xgb <- xgboost(data = as.matrix(x_train), label = as.matrix(y_train),
nrounds = 2200, verbose = FALSE, objective = "reg:linear", eval_metric = "rmse",
nthread = 8, eta = 0.01, gamma = 0.0468, max_depth = 6, min_child_weight = 1.7817,
subsample = 0.5213, colsample_bytree = 0.4603)
xgb.pred <- predict(xgb, newdata = as.matrix(x_valid))
rmse(y_valid, xgb.pred)
train.mtx = xgb.DMatrix(data = as.matrix(x_train), label = as.matrix(y_train))
valid.mtx = xgb.DMatrix(data = as.matrix(x_valid), label = as.matrix(y_valid))
params <- list(
booster = gblinear,
objective = "reg:logistic",
max_depth = 6,
eval_metric = "rmse",
eta = .01
)
params <- list(
booster = "gblinear",
objective = "reg:logistic",
max_depth = 6,
eval_metric = "rmse",
eta = .01
)
xgbcv <- xgb.cv(data =  train.mtx, nrounds = 2200, nfold = 5, showsd = TRUE,
metrics = "rmse", verbose = TRUE, params = params)
params <- list(
booster = "gblinear",
objective = "reg:linear",
max_depth = 6,
eval_metric = "rmse",
eta = .01
)
xgbcv <- xgb.cv(data =  train.mtx, nrounds = 2200, nfold = 5, showsd = TRUE,
metrics = "rmse", verbose = TRUE, params = params)
library(glmnet)
install.packages("glmnet")
library(glmnet)
set.seed(123)
cv_lasso = cv.glmnet(as.matrix(x_train), y_train)
## Predictions
preds <- predict(cv_lasso, newx = as.matrix(x_valid), s = "lambda.min")
rmse(y_valid, preds)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(reshape2)
library(caret)
data <- read.csv("train.csv")
head(data)
str(data)
data.id <- data$Id
data <- data %>% select(-Id)
imputeNumeric <- function(col) {
x.mean <- mean(col, na.rm = TRUE)
col[is.na(col)] <- x.mean
return(col)
}
imputeFactors <- function(col) {
levels(col) <- c(levels(col), "Missing")
col[is.na(col)] <-"Missing"
return(col)
}
imputeDataSet <- function(ds) {
tmp <- ds
for (col in names(tmp)) {
if (sum(is.na(tmp[[col]])) > 0) {
if (is.factor(tmp[[col]])) {
tmp[[col]] = imputeFactors(tmp[[col]])
}
else if (is.numeric(tmp[[col]])) {
tmp[[col]] = imputeNumeric(tmp[[col]])
}
}
}
return(tmp)
}
checkNas <- function(ds) {
columns <- names(ds)
col.nas <- sapply(columns, function(c) {sum(is.na(ds[[c]]))})
pcn.nas <- sapply(columns, function(c) {sum(is.na(ds[[c]])) / length(ds[[c]])})
num.nas <- data.frame(Column = columns, NumNas = col.nas, PcnNas = pcn.nas)
return(num.nas)
}
removeHighLevelNas <- function(data, nas.info, nas.level = .9){
col.stay <- as.character(nas.info[nas.info$PcnNas < nas.level, 'Column'])
return(data[, col.stay])
}
data.nas <- checkNas(data)
data <- removeHighLevelNas(data, data.nas)
data <- imputeDataSet(data)
checkNas(data)
FactorToInt <- function(col) {
lev <- levels(col)
y <- sapply(col, function(x) {which(lev == x)} )
return(y)
}
factorizeDS <- function(ds) {
tmp = ds
for (col in names(tmp)) {
if (is.factor(tmp[[col]]))
tmp[[col]] = FactorToInt(tmp[[col]])
}
return(tmp)
}
data <- factorizeDS(data)
sum(checkNas(data)$NumNas >0)
data.SalePrice <- data$SalePrice
data.nzv <- nearZeroVar(data[,-dim(data)[2]], saveMetrics = TRUE, names = TRUE)
data.nzv
nzv.vars <- data.nzv[data.nzv$zeroVar == FALSE  &  data.nzv$nzv == FALSE,]
data <- data[, rownames(nzv.vars)]
data['SalePrice'] =  data.SalePrice
data.cor = round(cor(data), 2)
data.mlt = melt(data.cor)
good.cor  = data.mlt %>%
filter(Var1 == "SalePrice" & value > .5)
data.mlt<- data.mlt %>%
filter(Var2 %in% good.cor$Var2) %>%
filter(Var1 %in% good.cor$Var2)
g <- ggplot(data = data.mlt, aes(x=Var1, y=Var2, fill=value))
g <- g + geom_tile()
g
data <- data[,good.cor$Var2]
for (col in names(data)){
data[[col]] = as.numeric(data[[col]])
}
set.seed(0)
inTrain <- createDataPartition(data$SalePrice, p = .7, list = FALSE)
train <- data[inTrain,]
valid <- data[-inTrain,]
y_train <- log(train$SalePrice + 1)
x_train <- train %>% dplyr::select(-SalePrice)
y_valid <- log(valid$SalePrice + 1)
x_valid <- valid %>% dplyr::select(-SalePrice)
library(xgboost)
library(Metrics)
set.seed(0)
xgb <- xgboost(data = as.matrix(x_train), label = as.matrix(y_train),
nrounds = 2200, verbose = FALSE, objective = "reg:linear", eval_metric = "rmse",
nthread = 8, eta = 0.01, gamma = 0.0468, max_depth = 6, min_child_weight = 1.7817,
subsample = 0.5213, colsample_bytree = 0.4603)
xgb.pred <- predict(xgb, newdata = as.matrix(x_valid))
rmse(y_valid, xgb.pred)
library(glmnet)
set.seed(123)
cv_lasso = cv.glmnet(as.matrix(x_train), y_train)
## Predictions
preds <- predict(cv_lasso, newx = as.matrix(x_valid), s = "lambda.min")
rmse(y_valid, preds)
library(Metrics)
library(mlr)
library(mlr)
tsk = makeRegrTask(data = data, target = data$SalePrice)
tsk = makeRegrTask(data = data, target = 'SalePrice')
ho  = makeResampleInstance("Holdout", tsk, split = .7)
library(mlr)
tsk = makeRegrTask(data = data, target = 'SalePrice')
ho  = makeResampleInstance("Holdout", tsk, split = .7)
tsk.train = subsetTask(tsk, ho$train.inds[[1]])
tsk.valid = subsetTask(tsk, ho$test.inds[[1]])
gbm_lrn = makeLearner("regr.gbm", par.vals = list(n.trees = 500, interaction.depth = 3))
cv      = makeResampleDesc("CV", iters = 5)
res     = resample(gbm_lrn, tsk.train, cv, acc)
res     = resample(gbm_lrn, tsk.train, cv, rmse)
n
gbm_model = mlr::train(gbm_lrn, tsk.train)
gbm_pred  = predict(gbm_model, newvalue = tsk.valid)
gbm_pred  = predict(gbm_model, tsk.valid)
performance(gbm_pred)
performance(gbm_pred, measures = ['mse','rmse'])
performance(gbm_pred,'mse','rmse')
performance(gbm_pred,mse)
performance(gbm_pred,mse,rmse)
performance(gbm_pred,rmse)
performance(gbm_pred,list(rmse, mse))
data.log <- data
data.log <- log(data$SalePrice + 1)
tsk = makeRegrTask(data = data.log, target = 'SalePrice')
ho  = makeResampleInstance("Holdout", tsk, split = .7)
data.log <- data
data.log <- log(data$SalePrice + 1)
tsk = makeRegrTask(data = data.log, target = 'SalePrice')
data.log <- data
data.log$SalePrice <- log(data$SalePrice + 1)
tsk = makeRegrTask(data = data.log, target = 'SalePrice')
ho  = makeResampleInstance("Holdout", tsk, split = .7)
tsk.train = subsetTask(tsk, ho$train.inds[[1]])
tsk.valid = subsetTask(tsk, ho$test.inds[[1]])
gbm_lrn = makeLearner("regr.gbm", par.vals = list(n.trees = 500, interaction.depth = 3))
cv      = makeResampleDesc("CV", iters = 5)
res     = resample(gbm_lrn, tsk.train, cv, rmse)
res     = resample(gbm_lrn, tsk.train, cv, rmse)
gbm_model = mlr::train(gbm_lrn, tsk.train)
gbm_model = mlr::train(gbm_lrn, tsk.train)
gbm_pred  = predict(gbm_model, tsk.valid)
performance(gbm_pred,list(rmse, mse))
gbm_lrn = makeLearner("regr.gbm", par.vals = list(n.trees = 2200, interaction.depth = 10))
cv      = makeResampleDesc("CV", iters = 5)
res     = resample(gbm_lrn, tsk.train, cv, rmse)
res     = resample(gbm_lrn, tsk.train, cv, rmse)
gbm_model = mlr::train(gbm_lrn, tsk.train)
gbm_pred  = predict(gbm_model, tsk.valid)
performance(gbm_pred,list(rmse, mse))
listLearners()
listLearners() -> l
head(l)
table(l$type)
head(l[l$type == "regr"])
head(l[l$type == "regr",])
head(l[l$type == "regr",])$class
lrn.list = listLearners()
lrn.list = lrn.list[lrn.list$type == "regr",class]
lrn.list = listLearners()
lrn.list = lrn.list[lrn.list$type == "regr",]$class
lrn.list
lrn.res = data.frame(Learner = lrn.list, mse = NA, rmse = NA)
lrn.list
lrn.res
x <- performance(gbm_pred,list(rmse, mse))
x
x['mse']
cv      = makeResampleDesc("CV", iters = 5)
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
pred  = predict(model.tsk.valid)
x <- performance(pred, list(rmse, mse))
lrn.res[lrn.res$Learner == learner]$rmse = x['rmse']
lrn.res[lrn.res$Learner == learner]$mse  = x['mse']
}
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
pred  = predict(model,tsk.valid)
x <- performance(pred, list(rmse, mse))
lrn.res[lrn.res$Learner == learner]$rmse = x['rmse']
lrn.res[lrn.res$Learner == learner]$mse  = x['mse']
}
head(lrn.res)
lrn.res
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
pred  = predict(model,tsk.valid)
x <- performance(pred, list(rmse, mse))
lrn.res[lrn.res$Learner == learner]$rmse = x['rmse']
lrn.res[lrn.res$Learner == learner]$mse  = x['mse']
print(learner)
print(x)
}
lrn.res
lrn.list = listLearners()
lrn.list = lrn.list[lrn.list$type == "regr",]$class
res = data.frame(Learner = lrn.list, mse = NA, rmse = NA)
cv      = makeResampleDesc("CV", iters = 5)
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
pred  = predict(model,tsk.valid)
x <- performance(pred, list(rmse, mse))
res[res$Learner == learner]$rmse = x['rmse']
res[res$Learner == learner]$mse  = x['mse']
print(learner)
print(x)
}
lrn.res
xgb_lrn = makeLearner("regr.gbm") #, par.vals = list(n.trees = 2200, interaction.depth = 10)
cv      = makeResampleDesc("CV", iters = 5)
res     = resample(gbm_lrn, tsk.train, cv, rmse)
gbm_model = mlr::train(gbm_lrn, tsk.train)
gbm_pred  = predict(gbm_model, tsk.valid)
x <- performance(gbm_pred,list(rmse, mse))
x
devtools::install_github("jakob-r/mlrHyperopt", dependencies = TRUE)
devtools::install_github("berndbischl/ParamHelpers")
library(xgboost)
devtools::install_github("berndbischl/ParamHelpers")
install("checkmate")
install.packages("checkmate")
install.packages("checkmate")
install.packages("checkmate")
install.packages("checkmate")
devtools::install_github("berndbischl/ParamHelpers")
devtools::install_github("berndbischl/ParamHelpers")
install.packages("checkmate")
install.packages("checkmate")
remove.packages("checkmate")
install.packages("checkmate")
install.packages("checkmate")
