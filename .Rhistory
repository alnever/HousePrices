install.packages("C:/Users/al_neverov.PROMINFORM/Downloads/checkmate_1.8.5.tar.gz", repos = NULL, type = "source")
version
devtools::install_github("berndbischl/ParamHelpers")
install.packages("C:/Users/al_neverov.PROMINFORM/Downloads/r-checkmate-1.8.2-r3.4.1_0.tar.bz2", repos = NULL)
version
install.packages("C:/Users/al_neverov.PROMINFORM/Downloads/r-checkmate-1.8.2-r3.3.2_0.tar.bz2", repos = NULL)
install.packages("C:/Users/al_neverov.PROMINFORM/Downloads/r-checkmate-1.8.2-r3.3.2_0.tar", repos = NULL)
library("checkmate", lib.loc="~/R/win-library/3.3")
remove.packages("checkmate", lib="~/R/win-library/3.3")
install.packages("C:/Users/al_neverov.PROMINFORM/Downloads/r-checkmate-1.8.2-r3.3.2_0.tar", repos = NULL)
knitr::opts_chunk$set(echo = TRUE)
lrn.list = listLearners()
library(mlr)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(reshape2)
library(caret)
library(Metrics)
library(mlr)
install.packages("mlr")
install.packages("mlr")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(reshape2)
library(caret)
library(Metrics)
library(mlr)
data <- read.csv("train.csv")
head(data)
str(data)
data.id <- data$Id
data <- data %>% select(-Id)
imputeNumeric <- function(col) {
x.mean <- mean(col, na.rm = TRUE)
col[is.na(col)] <- x.mean
return(col)
}
imputeFactors <- function(col) {
levels(col) <- c(levels(col), "Missing")
col[is.na(col)] <-"Missing"
return(col)
}
imputeDataSet <- function(ds) {
tmp <- ds
for (col in names(tmp)) {
if (sum(is.na(tmp[[col]])) > 0) {
if (is.factor(tmp[[col]])) {
tmp[[col]] = imputeFactors(tmp[[col]])
}
else if (is.numeric(tmp[[col]])) {
tmp[[col]] = imputeNumeric(tmp[[col]])
}
}
}
return(tmp)
}
checkNas <- function(ds) {
columns <- names(ds)
col.nas <- sapply(columns, function(c) {sum(is.na(ds[[c]]))})
pcn.nas <- sapply(columns, function(c) {sum(is.na(ds[[c]])) / length(ds[[c]])})
num.nas <- data.frame(Column = columns, NumNas = col.nas, PcnNas = pcn.nas)
return(num.nas)
}
removeHighLevelNas <- function(data, nas.info, nas.level = .9){
col.stay <- as.character(nas.info[nas.info$PcnNas < nas.level, 'Column'])
return(data[, col.stay])
}
data.nas <- checkNas(data)
data <- removeHighLevelNas(data, data.nas)
data <- imputeDataSet(data)
checkNas(data)
FactorToInt <- function(col) {
lev <- levels(col)
y <- sapply(col, function(x) {which(lev == x)} )
return(y)
}
factorizeDS <- function(ds) {
tmp = ds
for (col in names(tmp)) {
if (is.factor(tmp[[col]]))
tmp[[col]] = FactorToInt(tmp[[col]])
}
return(tmp)
}
data <- factorizeDS(data)
sum(checkNas(data)$NumNas >0)
data.SalePrice <- data$SalePrice
data.nzv <- nearZeroVar(data[,-dim(data)[2]], saveMetrics = TRUE, names = TRUE)
data.nzv
nzv.vars <- data.nzv[data.nzv$zeroVar == FALSE  &  data.nzv$nzv == FALSE,]
data <- data[, rownames(nzv.vars)]
data['SalePrice'] =  data.SalePrice
data.cor = round(cor(data), 2)
data.mlt = melt(data.cor)
good.cor  = data.mlt %>%
filter(Var1 == "SalePrice" & value > .5)
data.mlt<- data.mlt %>%
filter(Var2 %in% good.cor$Var2) %>%
filter(Var1 %in% good.cor$Var2)
g <- ggplot(data = data.mlt, aes(x=Var1, y=Var2, fill=value))
g <- g + geom_tile()
g
# data <- data[,good.cor$Var2]
# for (col in names(data)){
#   data[[col]] = as.numeric(data[[col]])
# }
#
# set.seed(0)
# inTrain <- createDataPartition(data$SalePrice, p = .7, list = FALSE)
# train <- data[inTrain,]
# valid <- data[-inTrain,]
#
# y_train <- log(train$SalePrice + 1)
# x_train <- train %>% dplyr::select(-SalePrice)
#
# y_valid <- log(valid$SalePrice + 1)
# x_valid <- valid %>% dplyr::select(-SalePrice)
library(mlr)
data.log <- data
data.log$SalePrice <- log(data$SalePrice + 1)
tsk = makeRegrTask(data = data.log, target = 'SalePrice')
ho  = makeResampleInstance("Holdout", tsk, split = .7)
tsk.train = subsetTask(tsk, ho$train.inds[[1]])
tsk.valid = subsetTask(tsk, ho$test.inds[[1]])
#GBM
# gbm_lrn = makeLearner("regr.gbm", par.vals = list(n.trees = 2200, interaction.depth = 10))
# cv      = makeResampleDesc("CV", iters = 5)
# res     = resample(gbm_lrn, tsk.train, cv, rmse)
#
# gbm_model = mlr::train(gbm_lrn, tsk.train)
# gbm_pred  = predict(gbm_model, tsk.valid)
# performance(gbm_pred,list(rmse, mse))
# xgb_lrn = makeLearner("regr.gbm") #, par.vals = list(n.trees = 2200, interaction.depth = 10)
# cv      = makeResampleDesc("CV", iters = 5)
# res     = resample(gbm_lrn, tsk.train, cv, rmse)
#
# gbm_model = mlr::train(gbm_lrn, tsk.train)
# gbm_pred  = predict(gbm_model, tsk.valid)
# x <- performance(gbm_pred,list(rmse, mse))
#
# res = hyperopt()
lrn.list = listLearners()
lrn.list = lrn.list[lrn.list$type == "regr",]$class
res = data.frame(Learner = "Dummy", mse = NA, rmse = NA)
p_train = data.frame()
p_valid = data.frame()
cv      = makeResampleDesc("CV", iters = 5)
lrn.list = listLearners()
lrn.list = lrn.list[lrn.list$type == "regr",]$class
res = data.frame()
p_train = data.frame()
p_valid = data.frame()
lrn.list = listLearners()
lrn.list = lrn.list[lrn.list$type == "regr",]$class
lrn.res = data.frame()
p_train = data.frame()
p_valid = data.frame()
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
valid.p  = predict(model,tsk.valid)
train.p  = predict(model,tsk.train)
x <- performance(valid.p, list(rmse, mse))
d = data.frame(Learner = learner, mse = x[], rmse = NA)
lrn.res = rbind(lrn.res, d)
p_train = cbind(p_train, train.p)
p_valid = cbind(p_valid, valid.p)
}
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
valid.p  = predict(model,tsk.valid)
train.p  = predict(model,tsk.train)
x <- performance(valid.p, list(rmse, mse))
d = data.frame(Learner = learner, mse = x[], rmse = NA)
if (nrow(d) == 0) {
lrn.res = d
} else {
lrn.res = rbind(lrn.res, d)
}
if (nrow(p_train) == 0) {
p_train = train.p
p_valid = valid.p
} else {
p_train = cbind(p_train, train.p)
p_valid = cbind(p_valid, valid.p)
}
}
nrow(p_train)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(reshape2)
library(caret)
library(Metrics)
library(mlr)
data <- read.csv("train.csv")
head(data)
str(data)
data.id <- data$Id
data <- data %>% select(-Id)
imputeNumeric <- function(col) {
x.mean <- mean(col, na.rm = TRUE)
col[is.na(col)] <- x.mean
return(col)
}
imputeFactors <- function(col) {
levels(col) <- c(levels(col), "Missing")
col[is.na(col)] <-"Missing"
return(col)
}
imputeDataSet <- function(ds) {
tmp <- ds
for (col in names(tmp)) {
if (sum(is.na(tmp[[col]])) > 0) {
if (is.factor(tmp[[col]])) {
tmp[[col]] = imputeFactors(tmp[[col]])
}
else if (is.numeric(tmp[[col]])) {
tmp[[col]] = imputeNumeric(tmp[[col]])
}
}
}
return(tmp)
}
checkNas <- function(ds) {
columns <- names(ds)
col.nas <- sapply(columns, function(c) {sum(is.na(ds[[c]]))})
pcn.nas <- sapply(columns, function(c) {sum(is.na(ds[[c]])) / length(ds[[c]])})
num.nas <- data.frame(Column = columns, NumNas = col.nas, PcnNas = pcn.nas)
return(num.nas)
}
removeHighLevelNas <- function(data, nas.info, nas.level = .9){
col.stay <- as.character(nas.info[nas.info$PcnNas < nas.level, 'Column'])
return(data[, col.stay])
}
data.nas <- checkNas(data)
data <- removeHighLevelNas(data, data.nas)
data <- imputeDataSet(data)
checkNas(data)
FactorToInt <- function(col) {
lev <- levels(col)
y <- sapply(col, function(x) {which(lev == x)} )
return(y)
}
factorizeDS <- function(ds) {
tmp = ds
for (col in names(tmp)) {
if (is.factor(tmp[[col]]))
tmp[[col]] = FactorToInt(tmp[[col]])
}
return(tmp)
}
data <- factorizeDS(data)
sum(checkNas(data)$NumNas >0)
data.SalePrice <- data$SalePrice
data.nzv <- nearZeroVar(data[,-dim(data)[2]], saveMetrics = TRUE, names = TRUE)
data.nzv
nzv.vars <- data.nzv[data.nzv$zeroVar == FALSE  &  data.nzv$nzv == FALSE,]
data <- data[, rownames(nzv.vars)]
data['SalePrice'] =  data.SalePrice
data.cor = round(cor(data), 2)
data.mlt = melt(data.cor)
good.cor  = data.mlt %>%
filter(Var1 == "SalePrice" & value > .5)
data.mlt<- data.mlt %>%
filter(Var2 %in% good.cor$Var2) %>%
filter(Var1 %in% good.cor$Var2)
g <- ggplot(data = data.mlt, aes(x=Var1, y=Var2, fill=value))
g <- g + geom_tile()
g
# data <- data[,good.cor$Var2]
# for (col in names(data)){
#   data[[col]] = as.numeric(data[[col]])
# }
#
# set.seed(0)
# inTrain <- createDataPartition(data$SalePrice, p = .7, list = FALSE)
# train <- data[inTrain,]
# valid <- data[-inTrain,]
#
# y_train <- log(train$SalePrice + 1)
# x_train <- train %>% dplyr::select(-SalePrice)
#
# y_valid <- log(valid$SalePrice + 1)
# x_valid <- valid %>% dplyr::select(-SalePrice)
library(mlr)
data.log <- data
data.log$SalePrice <- log(data$SalePrice + 1)
tsk = makeRegrTask(data = data.log, target = 'SalePrice')
ho  = makeResampleInstance("Holdout", tsk, split = .7)
tsk.train = subsetTask(tsk, ho$train.inds[[1]])
tsk.valid = subsetTask(tsk, ho$test.inds[[1]])
#GBM
# gbm_lrn = makeLearner("regr.gbm", par.vals = list(n.trees = 2200, interaction.depth = 10))
# cv      = makeResampleDesc("CV", iters = 5)
# res     = resample(gbm_lrn, tsk.train, cv, rmse)
#
# gbm_model = mlr::train(gbm_lrn, tsk.train)
# gbm_pred  = predict(gbm_model, tsk.valid)
# performance(gbm_pred,list(rmse, mse))
# xgb_lrn = makeLearner("regr.gbm") #, par.vals = list(n.trees = 2200, interaction.depth = 10)
# cv      = makeResampleDesc("CV", iters = 5)
# res     = resample(gbm_lrn, tsk.train, cv, rmse)
#
# gbm_model = mlr::train(gbm_lrn, tsk.train)
# gbm_pred  = predict(gbm_model, tsk.valid)
# x <- performance(gbm_pred,list(rmse, mse))
#
# res = hyperopt()
lrn.list = listLearners()
lrn.list = lrn.list[lrn.list$type == "regr",]$class
cv      = makeResampleDesc("CV", iters = 5)
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
valid.p  = predict(model,tsk.valid)
train.p  = predict(model,tsk.train)
x <- performance(valid.p, list(rmse, mse))
d = data.frame(Learner = learner, mse = x[], rmse = NA)
if (nrow(d) == 0) {
lrn.res = d
} else {
lrn.res = rbind(lrn.res, d)
}
if (nrow(p_train) == 0) {
p_train = train.p
p_valid = valid.p
} else {
p_train = cbind(p_train, train.p)
p_valid = cbind(p_valid, valid.p)
}
}
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
valid.p  = predict(model,tsk.valid)
train.p  = predict(model,tsk.train)
x <- performance(valid.p, list(rmse, mse))
d = data.frame(Learner = learner, mse = x[], rmse = NA)
if (nrow(d) == 0) {
lrn.res = d
} else {
lrn.res = rbind(lrn.res, d)
}
if (nrow(p_train) == 0) {
p_train = data.frame(learner = train.p)
p_valid = data.frame(learner = valid.p)
} else {
p_train = cbind(p_train, data.frame(learner = train.p))
p_valid = cbind(p_valid, data.frame(learner = valid.p))
}
}
lrn.list = listLearners()
lrn.list = lrn.list[lrn.list$type == "regr",]$class
lrn.res = NULL
p_train = NULL
p_test = NULL
cv      = makeResampleDesc("CV", iters = 5)
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
valid.p  = predict(model,tsk.valid)
train.p  = predict(model,tsk.train)
x <- performance(valid.p, list(rmse, mse))
d = data.frame(Learner = learner, mse = x[], rmse = NA)
if (nrow(d) == 0) {
lrn.res = d
} else {
lrn.res = rbind(lrn.res, d)
}
if (nrow(p_train) == 0) {
p_train = data.frame(learner = train.p)
p_valid = data.frame(learner = valid.p)
} else {
p_train = cbind(p_train, data.frame(learner = train.p))
p_valid = cbind(p_valid, data.frame(learner = valid.p))
}
}
lrn.list = listLearners()
lrn.list = lrn.list[lrn.list$type == "regr",]$class
lrn.res = NULL
p_train = NULL
p_test = NULL
cv      = makeResampleDesc("CV", iters = 5)
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
valid.p  = predict(model,tsk.valid)
train.p  = predict(model,tsk.train)
x <- performance(valid.p, list(rmse, mse))
d = data.frame(Learner = learner, mse = x[], rmse = NA)
if (lrn.res == NULL) {
lrn.res = d
} else {
lrn.res = rbind(lrn.res, d)
}
if (p_train == NULL) {
p_train = data.frame(learner = train.p)
p_valid = data.frame(learner = valid.p)
} else {
p_train = cbind(p_train, data.frame(learner = train.p))
p_valid = cbind(p_valid, data.frame(learner = valid.p))
}
}
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
valid.p  = predict(model,tsk.valid)
train.p  = predict(model,tsk.train)
x <- performance(valid.p, list(rmse, mse))
d = data.frame(Learner = learner, mse = x[], rmse = NA)
if (is.null(lrn.res)) {
lrn.res = d
} else {
lrn.res = rbind(lrn.res, d)
}
if (is.null(p_train)) {
p_train = data.frame(learner = train.p)
p_valid = data.frame(learner = valid.p)
} else {
p_train = cbind(p_train, data.frame(learner = train.p))
p_valid = cbind(p_valid, data.frame(learner = valid.p))
}
}
x
lrn.list = listLearners()
lrn.list = lrn.list[lrn.list$type == "regr",]$class
lrn.res = NULL
p_train = NULL
p_test = NULL
cv      = makeResampleDesc("CV", iters = 5)
for (learner in lrn.list) {
lrn = makeLearner(learner)
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
valid.p  = predict(model,tsk.valid)
train.p  = predict(model,tsk.train)
x <- performance(valid.p, list(rmse, mse))
d = data.frame(Learner = learner, mse = x[2], rmse = x[1])
if (is.null(lrn.res)) {
lrn.res = d
} else {
lrn.res = rbind(lrn.res, d)
}
if (is.null(p_train)) {
p_train = data.frame(learner = train.p)
p_valid = data.frame(learner = valid.p)
} else {
p_train = cbind(p_train, data.frame(learner = train.p))
p_valid = cbind(p_valid, data.frame(learner = valid.p))
}
}
View(tsk.valid)
View(tsk.valid)
head(task.valid$env$data)
d <- getTaskData(tsk.valid)
head(d)
lrn.res
head(train_p)
head(p_train)
valid.p
lrn = makeLearner("regr.xgboost")
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
valid.p  = predict(model,tsk.valid)
train.p  = predict(model,tsk.train)
x <- performance(valid.p, list(rmse, mse))
lrn = makeLearner("regr.xgboost", predict.type = "response")
res     = resample(lrn, tsk.train, cv, rmse)
model = mlr::train(lrn, tsk.train)
valid.p  = predict(model,tsk.valid)
train.p  = predict(model,tsk.train)
x <- performance(valid.p, list(rmse, mse))
lrn = makeLearner("regr.xgboost", predict.type = "prob")
lrn = makeLearner("regr.xgboost", predict.type = "se")
library(xgboost)
version
setwd("f:/work/r/Hous")
setwd("f:/work/r/HousePrices/")
source("training_mlr.R")
lrn.res
library(xgboost)
x_train <- p_train
y_train <- getTaskTargets(tsk.train)
train <- xgb.DMatrix(data = as.matrix(x_train), label = y_train)
x_valid <- p_valid
y_valid <- getTaskTargets(tsk.valid)
valid <- xgb.DMatrix(data = as.matrix(x_valid), label = y_valid)
watchlist <- list(eval = valid, train = train)
param <- list(
booster = "gblinear",
objective = "reg:linear",
eval_metric = "rmse",
seed = 0
)
xgb.model <- xgb.train(params = param,
data = train,
nrounds = 20000,
watchlist = watchlist,
print_every_n = 50)
xgb.predict <- predict(xgb.model, newdata = as.matrix(x_valid))
